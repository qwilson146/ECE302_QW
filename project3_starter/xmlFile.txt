<body>
<p><span style="font-size: 14pt;"><em><span style="text-decoration: underline;"><strong>Grade Structure:</strong></span></em></span></p>
<ul style="list-style-type: disc;">
   <li><span style="font-size: 14pt;">On autograder: 75 pts;</span></li>
   <li><span><span style="font-size: large;">Code manual grading: 25 pts</span><span><strong><span style="color: #e03e2d; font-size: large;">(10 pts for required new unit tests; 10 pts for memory leak detection; 5pts for inline comments and citation)</span></strong></span></span></li>
</ul>
<p></p>
<h2><span style="text-decoration: underline; font-size: 14pt;"><em><strong>Project Statement:;</strong></em></span></h2>
<p><span style="font-size: 14pt;">Recall the discussion of ADT Bag in Lecture 3, in this problem, you will implement two array-based implementations that conform to the<strong><span style="font-family: 'courier new', courier;">AbstractBag</span></strong>interface.</span></p>
<p><span style="font-size: 14pt;">You will have two test files for this project: one for the<span style="font-family: 'courier new', courier;"><strong>DynamicBag</strong></span>and one for the<strong><span style="font-family: 'courier new', courier;">LimitedSizeBag</span></strong>. When you first run<span style="text-decoration: underline;"><em>CMake: Debug</em></span>from the command palette, it will prompt you to select the debug target. Make sure you write and run the tests for both implementations!</span></p>
<p><span style="font-size: 14pt;">Follow the instructions below to implement the methods, write your additional tests for the functions, and submit your code via Gradescope to check your solution against the autograder tests and memory checking.<span style="background-color: #fbeeb8;">Action items are shaded in<strong>***;</strong>yellow.</span></span></p>
</body>
